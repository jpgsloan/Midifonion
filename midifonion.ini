# CONTROLLER 1:
#  P1.1: [CV Base]
#  P1.2: [GateLength]
#  B1.1: [play]
#  B1.2: [Live]
#  B1.3: [reset]
#  B1.4: [panic]

# CONTROLLER 2:
#  P2.1: [CV Range]
#  P2.2: [Pat]
#  B2.1: [Preset]
#  B2.2: [bypass]
#  B2.3: [Tuning]
#  B2.4: [mute]

# CONTROLLER 3:
#  P3.1: [Random]
#  P3.2: [Drop]

# CONTROLLER 4:
#  P4.1: [Transpose]
#  P4.2: [Dir]

[p2b8]
[p2b8]
[p2b8]
[p2b8]

# -------------------------------------------------
# Startup
# -------------------------------------------------

[once]
    delay = 0
    trigger = _START_UP_TRIG

[gatetool]
    inputtrigger = _START_UP_TRIG
    gatelength = 2
    outputgate = _STARTING_UP

[copy]
    input = _STARTING_UP * -1 + 1
    output = _STARTING_UP_INV

# -------------------------------------------------
# Channel Selector
# -------------------------------------------------

# Detect double clicks on any of the selector buttons, to select all channels.
# Every time a selector is pressed, we store the channel number to the queue.
# And also we trigger a trigger delay (using burst) for ~0.3 seconds from now. If the same button
# is pressed twice during that 0.3 seconds then output 1 and 2 of the queue will
# be equal values, and therefore we've detected a double click. After the 0.3 second
# trigger delay, the delay will push a value of zero (which no other button has been assigned that value)
# to the queue, so that we are guaranteed that the next press will not be duplicate value
# and falsely detect a double click.
[burst]
    hz = 3
    trigger = _CH_BUTTON_PRESSED
    skip = 1
    output = _ADD_ZERO

[compare]
    input = _ADD_ZERO
    compare = 1
    ifequal = 0
    else = _BTN_NUM
    output = _BTN_NUM_TO_QUEUE

[queue]
    input = _BTN_NUM_TO_QUEUE
    clock = _CH_BUTTON_PRESSED + _ADD_ZERO
    output1 = _LAST_BTN_PRS
    output2 = _LAST_LAST_BTN_PRS

[compare]
    input = _LAST_BTN_PRS
    compare = _LAST_LAST_BTN_PRS
    ifequal = 1
    else = 0
    output = _WAS_DBL_PRS

[copy]
    input = _CH_BUTTON_PRESSED * _WAS_DBL_PRS
    output = _DBL_CLKD_1

# Enforce that the buttons are reset prior to calling out a double click, so that when dbl click activates it will select everything.
[triggerdelay]
    input = _DBL_CLKD_1
    delay = 0.005
    repeats = 1
    output = _DBL_CLKD

# These are the selector buttons themselves. Everytime a selector is pressed,
# and there is only one button being held down, then we reset all the button values to
# the current B registers. This is because only the button you are currently holding
# will have a B register == 1, all others will be 0, and so your selection will end up
# being only the button you are currently pressing. If you are then holding a second button
# with the first still held, it will not trigger the button resets, and therefor let you select
# more channels.
[button]
    button = B3.1 + _DBL_CLKD
    startvalue = B3.1
    clear = _RST_CH_BTNS
    led = L3.1
    output = _SELECT_RAW_1

[button]
    button = B3.2 + _DBL_CLKD
    startvalue = B3.2
    clear = _RST_CH_BTNS
    led = L3.2
    output = _SELECT_RAW_2

[button]
    button = B4.1 + _DBL_CLKD
    startvalue = B4.1
    clear = _RST_CH_BTNS
    led = L4.1
    output = _SELECT_RAW_3

[button]
    button = B4.2 + _DBL_CLKD
    startvalue = B4.2
    clear = _RST_CH_BTNS
    led = L4.2
    output = _SELECT_RAW_4

[superjust]
    bypass = 1
    input1 = _SELECT_RAW_1 * _STARTING_UP_INV
    input2 = _SELECT_RAW_2 * _STARTING_UP_INV
    input3 = _SELECT_RAW_3 * _STARTING_UP_INV
    input4 = _SELECT_RAW_4 * _STARTING_UP_INV
    output1 = _SEL_1
    output2 = _SEL_2
    output3 = _SEL_3
    output4 = _SEL_4

# Calculate a few important stats, like:
# - Which button is being held down
# - The number of channels selected
# - The number of buttons being actively held down, (this is different from the number of selected channels)
# - A gate whenever any button is pressed
[mixer]
    input1 = B3.1 * 1 + 1
    input2 = B3.2 * 2 + 1
    input3 = B4.1 * 3 + 1
    input4 = B4.2 * 4 + 1
    maximum = _BTN_NUM

# [mixer]
#   input1 = _SEL_1
#   input2 = _SEL_2
#   input3 = _SEL_3
#   input4 = _SEL_4
#   output = _NUM_SELECTIONS

[mixer]
    input1 = B3.1
    input2 = B3.2
    input3 = B4.1
    input4 = B4.2
    output = _NUM_BUTTONS_PRESSED
    maximum = _SEL_BTN_PRSSD

# Convert this gate into a trigger
[burst]
    hz = 10
    trigger = _SEL_BTN_PRSSD
    output = _CH_BUTTON_PRESSED

[copy]
    input = _SEL_BTN_PRSSD * -1 + 1
#   output = _SEL_BTN_PRSSD_INV

# only send a reset trigger IF there is only one button being pressed
[compare]
    input = _NUM_BUTTONS_PRESSED
    compare = 1
    ifgreater = 0
    else = 1
    output = _SHOULD_RST_CH_BTNS

[copy]
    input = _CH_BUTTON_PRESSED * _SHOULD_RST_CH_BTNS
    output = _RST_CH_BTNS

# -------------------------------------------------
# Clocking
# -------------------------------------------------

# //////////////// EXTERNAL /////////////////
# [copy]

[copy]
    input = G1.1
    output = _CV_CLOCK

[copy]
    input = G1.2
    output = _EXT_RESET

# midiin
[midiin]
    channel = 1
    usb = 1
    notegap = 1
    clock = _MIDI_CLOCK
    stop = _MIDI_RESET
    running = _MIDI_RUNNING

# //////////////// INTERNAL /////////////////
# [copy]

# Internal clock master tempo
[pot]
    select = _PRESET_MODE * _STARTING_UP_INV
    pot = P1.1
    ledgauge = 0
    outputscale = 4
    notch = 0.1
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
    output = _INT_HZ
    onchange = _HZ_CHNG

# only allow 6 values per volt (60 values per 10V or 1.0), to match the precision
# of bpm (1HZ is 60BPM)
# (Also we can only show 3 digits in the X1 register anyway,
# so incrememnts of 1 bpm at a time)
[quantizer]
    input = _INT_HZ * 4 # multiply by 4 for 16th note granularity
    steps = 6
    output = _INT_HZ_QUANTIZED

[lfo]
    hz = _INT_HZ_QUANTIZED
    level = 1
    square = _INT_CLOCK

# If rate pot is mostly counterclockwise, then we start using midi external clock
# instead of the internal master tempo.
[compare]
    input = _INT_HZ
    compare = 0.02
    ifless = _MIDI_CLOCK
    else = _INT_CLOCK
    output = _INT_OR_MIDI_CLOCK

[compare]
    input = _INT_HZ
    compare = 3.98
    ifgreater = _CV_CLOCK
    else = _INT_OR_MIDI_CLOCK
    output = _CLOCK

[compare]
    input = _INT_HZ
    compare = 0.02
    ifless = 1
    else = 0
    output = _IS_MIDI_CLK

[copy]
    input = -1 * _IS_MIDI_CLK + 1
    output = _IS_MIDI_CLK_INV

# //////////////// TRANSPORT /////////////////
# [copy]

# Play/Stop button
[button]
    button = B1.1
    onvalue = 1 * _IS_MIDI_CLK_INV + _MIDI_RUNNING
    offvalue = 0
    led = L1.1
    output = _IS_PLAYING

# Reset Includes 3 sources:
# - Manual button
# - I2 input jack
# - Midi reset
[copy]
    input = B1.3 + _MIDI_RESET
    output = _COMBINED_RESET

[gatetool]
    inputgate = _COMBINED_RESET + _EXT_RESET
    gatelength = 0.005
    mingatelength = 0.005
    outputgate = _RESET

# //////////////// CLOCK OUTPUTS /////////////////
# [copy]

[copy]
    input = _CLOCK
    output = G9

[copy]
    input = _RESET
    output = G10

# -------------------------------------------------
# X1 Handling
# -------------------------------------------------

# ////////// BPM //////////
# [copy]

# Show the internal bpm on the X1 register for 1 second whenever the pot is turned.
[burst]
    hz = 0.5
    trigger = _HZ_CHNG
    output = _SHW_BPM

[math]
    input1 = _INT_HZ * 60 # 1HZ is 60BPM
    input2 = 1000 # divide by 1k to make 3 digit decimal for X1
    quotient = _BPM

[copy]
    input = _BPM * _SHW_BPM
    output = X1

# ////////// NUMBER OF BEATS //////////
# [copy]

# Show the internal bpm on the X1 register for 1 second whenever the pot is turned.
[burst]
    hz = 0.5
    trigger = _NUM_BEATS_CHANGED
    output = _SHOW_NUM_BEATS

[copy]
    input = _NUM_BEATS * _SHOW_NUM_BEATS
    output = X1

# -------------------------------------------------
# Main Buttons
# -------------------------------------------------

[buttongroup]
    button1 = B1.2
    button2 = B2.1
    led1 = L1.2
    led2 = L2.1
    buttonoutput1 = _LIVE_MODE
    buttonoutput2 = _PRESET_MODE

[button]
    button = B2.3
    led = L2.3
    output = _TUNING_MODE

[button]
    select = _SEL_1
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B2.2
    led = L2.2
    output = _BYPASS_1

[button]
    select = _SEL_2
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B2.2
    led = L2.2
    output = _BYPASS_2

[button]
    select = _SEL_3
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B2.2
    led = L2.2
    output = _BYPASS_3

[button]
    select = _SEL_4
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B2.2
    led = L2.2
    output = _BYPASS_4

# ///// CHANNEL INPUT TYPE SELECTORS /////
# [copy]

[button]
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B3.3
    states = 3
    led = L3.3
    output = _INPUT_TYPE_1

[button]
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B3.4
    states = 3
    led = L3.4
    output = _INPUT_TYPE_2

[button]
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B4.3
    states = 3
    led = L4.3
    output = _INPUT_TYPE_3

[button]
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B4.4
    states = 3
    led = L4.4
    output = _INPUT_TYPE_4

# ///////// MIDI PANIC /////////
# [copy]

[copy]
    input = B1.4
    output = _MIDI_PANIC

# -------------------------------------------------
# Arpeggio Inputs
# -------------------------------------------------

# ////////////// CHANNEL 1 /////////////////
# [copy]

[pot]
    select = _LIVE_MODE * _SEL_1
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P1.2
    startvalue = 0.3
    output = _GATE_LENGTH_1

[pot]
    select = _LIVE_MODE * _SEL_1
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P2.2
    discrete = 7
    output = _PATTERN_1

[pot]
    select = _LIVE_MODE * _SEL_1
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P3.2
    discrete = 4
    output = _DROP_1

[pot]
    select = _LIVE_MODE * _SEL_1
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P4.2
    discrete = 4
    output = _DIRECTION_1

[compare]
    input = _DIRECTION_1
    compare = 1
    ifequal = 1
    else = 0
    output = _REVERSE_1

[compare]
    input = _DIRECTION_1
    compare = 2
    ifequal = 1
    else = 0
    output = _PING_PONG_1

[compare]
    input = _DIRECTION_1
    compare = 3
    ifequal = 1
    else = 0
    output = _BUTTERFLY_1

[arpeggio]
    pitch = _CH_1_FOLD_MIN
    range = _CH_1_FOLD_MIN + _CH_1_FOLD_MAX
    clock = _CLOCK * _IS_PLAYING
    reset = _RESET
    pattern = _PATTERN_1
    drop = _DROP_1
    direction = _REVERSE_1
    pingpong = _PING_PONG_1
    butterfly = _BUTTERFLY_1
    select1 = _C_1 + _C_OCT_1
    select3 = _E_1
    select5 = _G_1
    select7 = _B_1
    select9 = _D_1
    select11 = _F_1
    select13 = _A_1
    selectfill1 = _C_SH_1
    selectfill2 = _D_SH_1
    selectfill3 = _F_SH_1
    selectfill4 = _G_SH_1
    selectfill5 = _A_SH_1
    output = _CH_1_ARP

# ////////////// CHANNEL 2 /////////////////
# [copy]

[pot]
    select = _LIVE_MODE * _SEL_2
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P1.2
    startvalue = 0.3
    output = _GATE_LENGTH_2

[pot]
    select = _LIVE_MODE * _SEL_2
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P2.2
    discrete = 7
    output = _PATTERN_2

[pot]
    select = _LIVE_MODE * _SEL_2
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P3.2
    discrete = 4
    output = _DROP_2

[pot]
    select = _LIVE_MODE * _SEL_2
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P4.2
    discrete = 4
    output = _DIRECTION_2

[compare]
    input = _DIRECTION_2
    compare = 1
    ifequal = 1
    else = 0
    output = _REVERSE_2

[compare]
    input = _DIRECTION_2
    compare = 2
    ifequal = 1
    else = 0
    output = _PING_PONG_2

[compare]
    input = _DIRECTION_2
    compare = 3
    ifequal = 1
    else = 0
    output = _BUTTERFLY_2

[arpeggio]
    pitch = _CH_2_FOLD_MIN
    range = _CH_2_FOLD_MIN + _CH_2_FOLD_MAX
    clock = _CLOCK * _IS_PLAYING
    reset = _RESET
    pattern = _PATTERN_2
    drop = _DROP_2
    direction = _REVERSE_2
    pingpong = _PING_PONG_2
    butterfly = _BUTTERFLY_2
    select1 = _C_2 + _C_OCT_2
    select3 = _E_2
    select5 = _G_2
    select7 = _B_2
    select9 = _D_2
    select11 = _F_2
    select13 = _A_2
    selectfill1 = _C_SH_2
    selectfill2 = _D_SH_2
    selectfill3 = _F_SH_2
    selectfill4 = _G_SH_2
    selectfill5 = _A_SH_2
    output = _CH_2_ARP

# ////////////// CHANNEL 3 /////////////////
# [copy]

[pot]
    select = _LIVE_MODE * _SEL_3
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P1.2
    startvalue = 0.3
    output = _GATE_LENGTH_3

[pot]
    select = _LIVE_MODE * _SEL_3
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P2.2
    discrete = 7
    output = _PATTERN_3

[pot]
    select = _LIVE_MODE * _SEL_3
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P3.2
    discrete = 4
    output = _DROP_3

[pot]
    select = _LIVE_MODE * _SEL_3
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P4.2
    discrete = 4
    output = _DIRECTION_3

[compare]
    input = _DIRECTION_3
    compare = 1
    ifequal = 1
    else = 0
    output = _REVERSE_3

[compare]
    input = _DIRECTION_3
    compare = 2
    ifequal = 1
    else = 0
    output = _PING_PONG_3

[compare]
    input = _DIRECTION_3
    compare = 3
    ifequal = 1
    else = 0
    output = _BUTTERFLY_3

[arpeggio]
    pitch = _CH_3_FOLD_MIN
    range = _CH_3_FOLD_MIN + _CH_3_FOLD_MAX
    clock = _CLOCK * _IS_PLAYING
    reset = _RESET
    pattern = _PATTERN_3
    drop = _DROP_3
    direction = _REVERSE_3
    pingpong = _PING_PONG_3
    butterfly = _BUTTERFLY_3
    select1 = _C_3 + _C_OCT_3
    select3 = _E_3
    select5 = _G_3
    select7 = _B_3
    select9 = _D_3
    select11 = _F_3
    select13 = _A_3
    selectfill1 = _C_SH_3
    selectfill2 = _D_SH_3
    selectfill3 = _F_SH_3
    selectfill4 = _G_SH_3
    selectfill5 = _A_SH_3
    output = _CH_3_ARP

# ////////////// CHANNEL 4 /////////////////
# [copy]

[pot]
    select = _LIVE_MODE * _SEL_4
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P1.2
    startvalue = 0.3
    output = _GATE_LENGTH_4

[pot]
    select = _LIVE_MODE * _SEL_4
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P2.2
    discrete = 7
    output = _PATTERN_4

[pot]
    select = _LIVE_MODE * _SEL_4
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P3.2
    discrete = 4
    output = _DROP_4

[pot]
    select = _LIVE_MODE * _SEL_4
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    pot = P4.2
    discrete = 4
    output = _DIRECTION_4

[compare]
    input = _DIRECTION_4
    compare = 1
    ifequal = 1
    else = 0
    output = _REVERSE_4

[compare]
    input = _DIRECTION_4
    compare = 2
    ifequal = 1
    else = 0
    output = _PING_PONG_4

[compare]
    input = _DIRECTION_4
    compare = 3
    ifequal = 1
    else = 0
    output = _BUTTERFLY_4

[arpeggio]
    pitch = _CH_4_FOLD_MIN
    range = _CH_4_FOLD_MIN + _CH_4_FOLD_MAX
    clock = _CLOCK * _IS_PLAYING
    reset = _RESET
    pattern = _PATTERN_4
    drop = _DROP_4
    direction = _REVERSE_4
    pingpong = _PING_PONG_4
    butterfly = _BUTTERFLY_4
    select1 = _C_4 + _C_OCT_4
    select3 = _E_4
    select5 = _G_4
    select7 = _B_4
    select9 = _D_4
    select11 = _F_4
    select13 = _A_4
    selectfill1 = _C_SH_4
    selectfill2 = _D_SH_4
    selectfill3 = _F_SH_4
    selectfill4 = _G_SH_4
    selectfill5 = _A_SH_4
    output = _CH_4_ARP

# -------------------------------------------------
# External Inputs
# -------------------------------------------------

# ////////////// CHANNEL 1 ////////////////
# [copy]

[midiin]
    channel = 1
    usb = 0
    pitch1 = _CH_1_MIDI_IN_1
    gate1 = _CH_1_MIDI_GATE_1

[copy]
    input = I1
    output = _CH_1_CV_INPUT

# normal to 1 so that no sample/hold takes place when nothing is patched
[copy]
    input = 1
    output = N5

[copy]
    input = I5
    output = _CH_1_EXT_GATE

[switch]
    input1 = _CH_1_CV_INPUT
    input2 = _CH_1_MIDI_IN_1
    input3 = _CH_1_ARP
    offset = _INPUT_TYPE_1
    output1 = _CH_1_INPUT_1

[switch]
    input1 = _CH_1_EXT_GATE
    input2 = _CH_1_MIDI_GATE_1
    input3 = _CH_1_EXT_GATE
    offset = _INPUT_TYPE_1
    output1 = _CH_1_GATE_IN_1

# ////////////// CHANNEL 2 ////////////////
# [copy]

[midiin]
    channel = 2
    usb = 0
    pitch1 = _CH_2_MIDI_IN_1
    gate1 = _CH_2_MIDI_GATE_1

[copy]
    input = I2
    output = _CH_2_CV_INPUT

# normal to 1 so that no sample/hold takes place when nothing is patched
[copy]
    input = 1
    output = N6

[copy]
    input = I6
    output = _CH_2_EXT_GATE

[switch]
    input1 = _CH_2_CV_INPUT
    input2 = _CH_2_MIDI_IN_1
    input3 = _CH_2_ARP
    offset = _INPUT_TYPE_2
    output1 = _CH_2_INPUT_1

[switch]
    input1 = _CH_2_EXT_GATE
    input2 = _CH_2_MIDI_GATE_1
    input3 = _CH_2_EXT_GATE
    offset = _INPUT_TYPE_2
    output1 = _CH_2_GATE_IN_1

# ////////////// CHANNEL 3 ////////////////
# [copy]

[midiin]
    channel = 3
    usb = 0
    pitch1 = _CH_3_MIDI_IN_1
    gate1 = _CH_3_MIDI_GATE_1

[copy]
    input = I3
    output = _CH_3_CV_INPUT

# normal to 1 so that no sample/hold takes place when nothing is patched
[copy]
    input = 1
    output = N7

[copy]
    input = I7
    output = _CH_3_EXT_GATE

[switch]
    input1 = _CH_3_CV_INPUT
    input2 = _CH_3_MIDI_IN_1
    input3 = _CH_3_ARP
    offset = _INPUT_TYPE_3
    output1 = _CH_3_INPUT_1

[switch]
    input1 = _CH_3_EXT_GATE
    input2 = _CH_3_MIDI_GATE_1
    input3 = _CH_3_EXT_GATE
    offset = _INPUT_TYPE_3
    output1 = _CH_3_GATE_IN_1

# ////////////// CHANNEL 4 ////////////////
# [copy]

[midiin]
    channel = 4
    usb = 0
    pitch1 = _CH_4_MIDI_IN_1
    gate1 = _CH_4_MIDI_GATE_1

[copy]
    input = I4
    output = _CH_4_CV_INPUT

# normal to 1 so that no sample/hold takes place when nothing is patched
[copy]
    input = 1
    output = N8

[copy]
    input = I8
    output = _CH_4_EXT_GATE

[switch]
    input1 = _CH_4_CV_INPUT
    input2 = _CH_4_MIDI_IN_1
    input3 = _CH_4_ARP
    offset = _INPUT_TYPE_4
    output1 = _CH_4_INPUT_1

[switch]
    input1 = _CH_4_EXT_GATE
    input2 = _CH_4_MIDI_GATE_1
    input3 = _CH_4_EXT_GATE
    offset = _INPUT_TYPE_4
    output1 = _CH_4_GATE_IN_1

# -------------------------------------------------
# Button Keyboards
# -------------------------------------------------

# ////////////// CHANNEL 1 /////////////////
# [copy]

[buttongroup]
    select = _SEL_1 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_1
    buttonoutput2 = _C_SH_1
    buttonoutput3 = _D_1
    buttonoutput4 = _D_SH_1
    buttonoutput5 = _E_1
    buttonoutput6 = _F_1
    buttonoutput7 = _F_SH_1
    buttonoutput8 = _G_1
    buttonoutput9 = _G_SH_1
    buttonoutput10 = _A_1
    buttonoutput11 = _A_SH_1
    buttonoutput12 = _B_1
    buttonoutput13 = _C_OCT_1

[quantizer]
    input = _CH_1_INPUT_FOLDED_1
    steps = 12
    changed = _CH_1_Q_CHANGED_1

[minifonion]
    input = _CH_1_INPUT_FOLDED_1
    bypass = _BYPASS_1
    tuningmode = _TUNING_MODE
    tuningpitch = 0.3
    select1 = _C_1 + _C_OCT_1
    select3 = _E_1
    select5 = _G_1
    select7 = _B_1
    select9 = _D_1
    select11 = _F_1
    select13 = _A_1
    selectfill1 = _C_SH_1
    selectfill2 = _D_SH_1
    selectfill3 = _F_SH_1
    selectfill4 = _G_SH_1
    selectfill5 = _A_SH_1
    notechange = _CH_1_M_CHANGED_1
    output = _CH_1_QUANTIZED_1

[copy]
    input = _CH_1_M_CHANGED_1 * _CH_1_Q_CHANGED_1
    output = _CH_1_AUTO_GATE_1

[sample]
    input = _CH_1_QUANTIZED_1
    gate = _CH_1_GATE_IN_1
    output = _CH_1_OUTPUT_1

[pot]
    pot = P1.1
    select = _SEL_1 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    outputscale = 0.5
    bipolar = _CH_1_FOLD_MIN

[pot]
    pot = P2.1
    select = _SEL_1 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    discrete = 10
    output = _CH_1_FOLD_MAX_OFFSET

[copy]
    input = _CH_1_FOLD_MAX_OFFSET / 10 + 1V
    output = _CH_1_FOLD_MAX

[fold]
    input = _CH_1_INPUT_1
    foldby = 1V
    minimum = _CH_1_FOLD_MIN
    maximum = _CH_1_FOLD_MIN + _CH_1_FOLD_MAX
    output = _CH_1_INPUT_FOLDED_1

# ////////////// CHANNEL 2 /////////////////
# [copy]

[buttongroup]
    select = _SEL_2 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_2
    buttonoutput2 = _C_SH_2
    buttonoutput3 = _D_2
    buttonoutput4 = _D_SH_2
    buttonoutput5 = _E_2
    buttonoutput6 = _F_2
    buttonoutput7 = _F_SH_2
    buttonoutput8 = _G_2
    buttonoutput9 = _G_SH_2
    buttonoutput10 = _A_2
    buttonoutput11 = _A_SH_2
    buttonoutput12 = _B_2
    buttonoutput13 = _C_OCT_2

[quantizer]
    input = _CH_2_INPUT_FOLDED_1
    steps = 12
    changed = _CH_2_Q_CHANGED_1

[minifonion]
    input = _CH_2_INPUT_FOLDED_1
    bypass = _BYPASS_2
    tuningmode = _TUNING_MODE
    tuningpitch = 0.3
    select1 = _C_2 + _C_OCT_2
    select3 = _E_2
    select5 = _G_2
    select7 = _B_2
    select9 = _D_2
    select11 = _F_2
    select13 = _A_2
    selectfill1 = _C_SH_2
    selectfill2 = _D_SH_2
    selectfill3 = _F_SH_2
    selectfill4 = _G_SH_2
    selectfill5 = _A_SH_2
    notechange = _CH_2_M_CHANGED_1
    output = _CH_2_QUANTIZED_1

[copy]
    input = _CH_2_M_CHANGED_1 * _CH_2_Q_CHANGED_1
    output = _CH_2_AUTO_GATE_1

[sample]
    input = _CH_2_QUANTIZED_1
    gate = _CH_2_GATE_IN_1
    output = _CH_2_OUTPUT_1

[pot]
    pot = P1.1
    select = _SEL_2 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    outputscale = 0.5
    bipolar = _CH_2_FOLD_MIN

[pot]
    pot = P2.1
    select = _SEL_2 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    discrete = 10
    output = _CH_2_FOLD_MAX_OFFSET

[copy]
    input = _CH_2_FOLD_MAX_OFFSET / 10 + 1V
    output = _CH_2_FOLD_MAX

[fold]
    input = _CH_2_INPUT_1
    foldby = 1V
    minimum = _CH_2_FOLD_MIN
    maximum = _CH_2_FOLD_MIN + _CH_2_FOLD_MAX
    output = _CH_2_INPUT_FOLDED_1

# ////////////// CHANNEL 3 /////////////////
# [copy]

[buttongroup]
    select = _SEL_3 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_3
    buttonoutput2 = _C_SH_3
    buttonoutput3 = _D_3
    buttonoutput4 = _D_SH_3
    buttonoutput5 = _E_3
    buttonoutput6 = _F_3
    buttonoutput7 = _F_SH_3
    buttonoutput8 = _G_3
    buttonoutput9 = _G_SH_3
    buttonoutput10 = _A_3
    buttonoutput11 = _A_SH_3
    buttonoutput12 = _B_3
    buttonoutput13 = _C_OCT_3

[quantizer]
    input = _CH_3_INPUT_FOLDED_1
    steps = 12
    changed = _CH_3_Q_CHANGED_1

[minifonion]
    input = _CH_3_INPUT_FOLDED_1
    bypass = _BYPASS_3
    tuningmode = _TUNING_MODE
    tuningpitch = 0.3
    select1 = _C_3 + _C_OCT_3
    select3 = _E_3
    select5 = _G_3
    select7 = _B_3
    select9 = _D_3
    select11 = _F_3
    select13 = _A_3
    selectfill1 = _C_SH_3
    selectfill2 = _D_SH_3
    selectfill3 = _F_SH_3
    selectfill4 = _G_SH_3
    selectfill5 = _A_SH_3
    notechange = _CH_3_M_CHANGED_1
    output = _CH_3_QUANTIZED_1

[copy]
    input = _CH_3_M_CHANGED_1 * _CH_3_Q_CHANGED_1
    output = _CH_3_AUTO_GATE_1

[sample]
    input = _CH_3_QUANTIZED_1
    gate = _CH_3_GATE_IN_1
    output = _CH_3_OUTPUT_1

[pot]
    pot = P1.1
    select = _SEL_3 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    outputscale = 0.5
    bipolar = _CH_3_FOLD_MIN

[pot]
    pot = P2.1
    select = _SEL_3 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    discrete = 10
    output = _CH_3_FOLD_MAX_OFFSET

[copy]
    input = _CH_3_FOLD_MAX_OFFSET / 10 + 1V
    output = _CH_3_FOLD_MAX

[fold]
    input = _CH_3_INPUT_1
    foldby = 1V
    minimum = _CH_3_FOLD_MIN
    maximum = _CH_3_FOLD_MIN + _CH_3_FOLD_MAX
    output = _CH_3_INPUT_FOLDED_1

# ////////////// CHANNEL 4 /////////////////
# [copy]

[buttongroup]
    select = _SEL_4 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_4
    buttonoutput2 = _C_SH_4
    buttonoutput3 = _D_4
    buttonoutput4 = _D_SH_4
    buttonoutput5 = _E_4
    buttonoutput6 = _F_4
    buttonoutput7 = _F_SH_4
    buttonoutput8 = _G_4
    buttonoutput9 = _G_SH_4
    buttonoutput10 = _A_4
    buttonoutput11 = _A_SH_4
    buttonoutput12 = _B_4
    buttonoutput13 = _C_OCT_4

[quantizer]
    input = _CH_4_INPUT_FOLDED_1
    steps = 12
    changed = _CH_4_Q_CHANGED_1

[minifonion]
    input = _CH_4_INPUT_FOLDED_1
    bypass = _BYPASS_4
    tuningmode = _TUNING_MODE
    tuningpitch = 0.3
    select1 = _C_4 + _C_OCT_4
    select3 = _E_4
    select5 = _G_4
    select7 = _B_4
    select9 = _D_4
    select11 = _F_4
    select13 = _A_4
    selectfill1 = _C_SH_4
    selectfill2 = _D_SH_4
    selectfill3 = _F_SH_4
    selectfill4 = _G_SH_4
    selectfill5 = _A_SH_4
    notechange = _CH_4_M_CHANGED_1
    output = _CH_4_QUANTIZED_1

[copy]
    input = _CH_4_M_CHANGED_1 * _CH_4_Q_CHANGED_1
    output = _CH_4_AUTO_GATE_1

[sample]
    input = _CH_4_QUANTIZED_1
    gate = _CH_4_GATE_IN_1
    output = _CH_4_OUTPUT_1

[pot]
    pot = P1.1
    select = _SEL_4 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    outputscale = 0.5
    bipolar = _CH_4_FOLD_MIN

[pot]
    pot = P2.1
    select = _SEL_4 * _LIVE_MODE
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    discrete = 10
    output = _CH_4_FOLD_MAX_OFFSET

[copy]
    input = _CH_4_FOLD_MAX_OFFSET / 10 + 1V
    output = _CH_4_FOLD_MAX

[fold]
    input = _CH_4_INPUT_1
    foldby = 1V
    minimum = _CH_4_FOLD_MIN
    maximum = _CH_4_FOLD_MIN + _CH_4_FOLD_MAX
    output = _CH_4_INPUT_FOLDED_1

# -------------------------------------------------
# GateLengths
# -------------------------------------------------

[gatetool]
    taptempo = _CLOCK
    inputgate = _CH_1_AUTO_GATE_1
    gatelength = _GATE_LENGTH_1
    outputgate = _CH_1_AUTO_GATE_W_LENGTH_1

[gatetool]
    taptempo = _CLOCK
    inputgate = _CH_2_AUTO_GATE_1
    gatelength = _GATE_LENGTH_2
    outputgate = _CH_2_AUTO_GATE_W_LENGTH_1

[gatetool]
    taptempo = _CLOCK
    inputgate = _CH_3_AUTO_GATE_1
    gatelength = _GATE_LENGTH_3
    outputgate = _CH_3_AUTO_GATE_W_LENGTH_1

[gatetool]
    taptempo = _CLOCK
    inputgate = _CH_4_AUTO_GATE_1
    gatelength = _GATE_LENGTH_4
    outputgate = _CH_4_AUTO_GATE_W_LENGTH_1

# -------------------------------------------------
# Preset Mode
# -------------------------------------------------

# ////////// PRESET SEQUENCER //////////
# Each preset can be up to 64 beats long 
# (we can probably increase this if wanted).
# This means that when 64 clock ticks have passed:
# - a reset will be sent to all arps 
# - If presets are queued up, load next preset

# You can queue up to 64 presets in a chain, 
# by holding Preset Mode button and clicking on a preset.
# Or you can just click on various presets
# (without holding Preset Mode)
# in order to switch immediately and clear any currently queued presets.
# [copy]

[copy]
    input = B2.1
    output = _PRESET_MODE_HELD

[copy]
    input = _PRESET_MODE_HELD * -1 + 1
    output = _PRESET_MODE_NOT_HELD

[buttongroup]
    select = _PRESET_MODE
    longpresstime = 1
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    output = _MANUAL_PRESET_NUM
    longpress = _SAVE
    buttonpress = _PRESET_BUTTON_PRESSED

[copy]
    input = _PRESET_BUTTON_PRESSED * _PRESET_MODE_NOT_HELD
    output = _MANUAL_LOAD

[compare]
    input = _CUR_TOTAL_QUEUED_PRESETS - 1
    compare = 0
    ifgreater = _PRESET_CLOCK_DELAYED
    else = 0
    output = _SEQUENCED_LOAD

[copy]
    input = _MANUAL_LOAD + _SEQUENCED_LOAD
    output = _LOAD

[copy]
    input = _MANUAL_LOAD
    output = _CLEAR_QUEUE

# ////////// CALCULATE CURRENT BEAT //////////
# [copy]

[pot]
    select = _PRESET_MODE
    pot = P2.1
    outputscale = 63
    startvalue = 0.25
    output = _NUM_BEATS_MINUS_1
    onchange = _NUM_BEATS_CHANGED

[copy]
    input = _NUM_BEATS_MINUS_1 + 1
    output = _NUM_BEATS

[nudge]
    dontsave = 1
    buttonup = _CLOCK
    startvalue = 1
    clear = _RESET
    amount = 1
    minimum = 1
    maximum = _NUM_BEATS - 1
    wrap = 1
    output = _CURRENT_BEAT

[compare]
    input = _CURRENT_BEAT
    compare = 1
    ifequal = 1
    else = 0
    output = _PRESET_CLOCK

[triggerdelay]
    input = _PRESET_CLOCK
    delay = 0.002
    output = _PRESET_CLOCK_DELAYED

# ///////// CALCULATE CURRENT PRESET INDEXES //////////
# [copy]

[nudge]
    dontsave = 1
    buttonup = _QUEUE_UP_PRESET
    amount = 1
    minimum = 0
    maximum = 63
    clear = _CLEAR_QUEUE
    startvalue = 1
    output = _CUR_TOTAL_QUEUED_PRESETS

# Start at max and count backwards, since the queue is a queue, 
# so each newly added preset bumps into slot 1
# and pushes everything else one more index.
[nudge]
    dontsave = 1
    clear = _CLEAR_QUEUE
    buttondown = _PRESET_CLOCK
    amount = 1
    minimum = 0
    maximum = _CUR_TOTAL_QUEUED_PRESETS - 1
    startvalue = _CUR_TOTAL_QUEUED_PRESETS - 1
    wrap = 1
    output = _CUR_PRESET_COUNT

[math]
    input1 = _CUR_PRESET_COUNT
    input2 = 8
    modulo = _CUR_PRESET_ROW_INDEX

[math]
    input1 = _CUR_PRESET_COUNT
    input2 = 8
    quotient = _CUR_PRESET_QUOTIENT

[math]
    input1 = _CUR_PRESET_QUOTIENT
    floor = _CUR_PRESET_COLUMN_INDEX

# ////////// PRESET SEQUENCER //////////
# [copy]

[copy]
    input = _PRESET_BUTTON_PRESSED * _PRESET_MODE_HELD
    output = _QUEUE_UP_PRESET

# Queue a preset whenever you press a preset WHILE holding the preset mode button. 
# Click a single preset without holding preset mode button to clear.
[queue]
    input = _MANUAL_PRESET_NUM
    clock = _QUEUE_UP_PRESET + _MANUAL_LOAD
    outputpos1 = 8 * _CUR_PRESET_COLUMN_INDEX + 1
    outputpos2 = 8 * _CUR_PRESET_COLUMN_INDEX + 2
    outputpos3 = 8 * _CUR_PRESET_COLUMN_INDEX + 3
    outputpos4 = 8 * _CUR_PRESET_COLUMN_INDEX + 4
    outputpos5 = 8 * _CUR_PRESET_COLUMN_INDEX + 5
    outputpos6 = 8 * _CUR_PRESET_COLUMN_INDEX + 6
    outputpos7 = 8 * _CUR_PRESET_COLUMN_INDEX + 7
    outputpos8 = 8 * _CUR_PRESET_COLUMN_INDEX + 8
    output1 = _QUEUED_PRESET_1
    output2 = _QUEUED_PRESET_2
    output3 = _QUEUED_PRESET_3
    output4 = _QUEUED_PRESET_4
    output5 = _QUEUED_PRESET_5
    output6 = _QUEUED_PRESET_6
    output7 = _QUEUED_PRESET_7
    output8 = _QUEUED_PRESET_8

[switch]
    input1 = _QUEUED_PRESET_1
    input2 = _QUEUED_PRESET_2
    input3 = _QUEUED_PRESET_3
    input4 = _QUEUED_PRESET_4
    input5 = _QUEUED_PRESET_5
    input6 = _QUEUED_PRESET_6
    input7 = _QUEUED_PRESET_7
    input8 = _QUEUED_PRESET_8
    offset = _CUR_PRESET_ROW_INDEX
    output1 = _PRESET

# Need to do the following:
# - send reset to arps when preset clock ticks
# [copy]

# -------------------------------------------------
# tuning mode gates
# -------------------------------------------------

[lfo]
    hz = 0.2
    pulsewidth = 0.9
    square = _TUNING_MODE_GATE

[compare]
    input = _TUNING_MODE
    compare = 1
    ifequal = _TUNING_MODE_GATE
    else = _CH_1_AUTO_GATE_W_LENGTH_1
    output = _CH_1_AUTO_GATE_OUTPUT

[compare]
    input = _TUNING_MODE
    compare = 1
    ifequal = _TUNING_MODE_GATE
    else = _CH_2_AUTO_GATE_W_LENGTH_1
    output = _CH_2_AUTO_GATE_OUTPUT

[compare]
    input = _TUNING_MODE
    compare = 1
    ifequal = _TUNING_MODE_GATE
    else = _CH_3_AUTO_GATE_W_LENGTH_1
    output = _CH_3_AUTO_GATE_OUTPUT

[compare]
    input = _TUNING_MODE
    compare = 1
    ifequal = _TUNING_MODE_GATE
    else = _CH_4_AUTO_GATE_W_LENGTH_1
    output = _CH_4_AUTO_GATE_OUTPUT

# -------------------------------------------------
# Mutes
# -------------------------------------------------

[button]
    select = _SEL_1
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B2.4
    led = L2.4
    output = _IS_MUTED_1

[copy]
    input = _IS_MUTED_1 * -1 + 1
    output = _IS_NOT_MUTED_1

[button]
    select = _SEL_2
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B2.4
    led = L2.4
    output = _IS_MUTED_2

[copy]
    input = _IS_MUTED_2 * -1 + 1
    output = _IS_NOT_MUTED_2

[button]
    select = _SEL_3
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B2.4
    led = L2.4
    output = _IS_MUTED_3

[copy]
    input = _IS_MUTED_3 * -1 + 1
    output = _IS_NOT_MUTED_3

[button]
    select = _SEL_4
    preset = _PRESET
    loadpreset = _LOAD
    savepreset = _SAVE
    button = B2.4
    led = L2.4
    output = _IS_MUTED_4

[copy]
    input = _IS_MUTED_4 * -1 + 1
    output = _IS_NOT_MUTED_4

# -------------------------------------------------
# Outputs
# -------------------------------------------------

# ////////////// CHANNEL 1 ////////////////
# [copy]

[copy]
    input = _CH_1_OUTPUT_1 * _IS_NOT_MUTED_1
    output = O1

[copy]
    input = _CH_1_AUTO_GATE_OUTPUT * _IS_NOT_MUTED_1
    output = G1.5

[midiout]
    channel = 1
    pitch1 = _CH_1_OUTPUT_1
    gate1 = _CH_1_AUTO_GATE_OUTPUT * _IS_NOT_MUTED_1
    usb = 1
    trs = 1
    allnotesoff = _MIDI_PANIC * _SEL_1

# ////////////// CHANNEL 2 ////////////////
# [copy]

[copy]
    input = _CH_2_OUTPUT_1 * _IS_NOT_MUTED_2
    output = O2

[copy]
    input = _CH_2_AUTO_GATE_OUTPUT * _IS_NOT_MUTED_2
    output = G1.6

[midiout]
    channel = 2
    pitch1 = _CH_2_OUTPUT_1
    gate1 = _CH_2_AUTO_GATE_OUTPUT * _IS_NOT_MUTED_2
    usb = 1
    trs = 1
    allnotesoff = _MIDI_PANIC * _SEL_2

# ////////////// CHANNEL 3 ////////////////
# [copy]

[copy]
    input = _CH_3_OUTPUT_1 * _IS_NOT_MUTED_3
    output = O3

[copy]
    input = _CH_3_AUTO_GATE_OUTPUT * _IS_NOT_MUTED_3
    output = G1.7

[midiout]
    channel = 3
    pitch1 = _CH_3_OUTPUT_1
    gate1 = _CH_3_AUTO_GATE_OUTPUT * _IS_NOT_MUTED_3
    usb = 1
    trs = 1
    allnotesoff = _MIDI_PANIC * _SEL_3

# ////////////// CHANNEL 4 ////////////////
# [copy]

[copy]
    input = _CH_4_OUTPUT_1 * _IS_NOT_MUTED_4
    output = O4

[copy]
    input = _CH_4_AUTO_GATE_OUTPUT * _IS_NOT_MUTED_4
    output = G1.8

[midiout]
    channel = 4
    pitch1 = _CH_4_OUTPUT_1
    gate1 = _CH_4_AUTO_GATE_OUTPUT * _IS_NOT_MUTED_4
    usb = 1
    trs = 1
    allnotesoff = _MIDI_PANIC * _SEL_4

# -------------------------------------------------
# Background leds
# -------------------------------------------------

# ////////////// MUTE STATE LEDS ///////////////
# [copy]

[superjust]
    input1 = 0.2 * _IS_MUTED_1 + L3.1
    input2 = 0.2 * _IS_MUTED_2 + L3.2
    input3 = 0.2 * _IS_MUTED_3 + L4.1
    input4 = 0.2 * _IS_MUTED_4 + L4.2
    bypass = 1
    output1 = L3.1
    output2 = L3.2
    output3 = L4.1
    output4 = L4.2

# /////// PRESET SAVE ANIMATION ////////
# [copy]

[mixer]
    input1 = B1.5
    input2 = B1.6
    input3 = B2.5
    input4 = B2.6
    input5 = B3.5
    input6 = B3.6
    input7 = B4.5
    input8 = B4.6
    maximum = _TOP_BUTTONS_PRESS

[mixer]
    input1 = B1.7
    input2 = B1.8
    input3 = B2.7
    input4 = B2.8
    input5 = B3.7
    input6 = B3.8
    input7 = B4.7
    input8 = B4.8
    maximum = _BOTTOM_BUTTONS_PRESS

[mixer]
    input1 = _TOP_BUTTONS_PRESS
    input2 = _BOTTOM_BUTTONS_PRESS
    maximum = _STEP_BUTTON_PRESSED

[contour]
    gate = _STEP_BUTTON_PRESSED * _PRESET_MODE
    abortattack = 1
    startfromzero = 1
    predelay = 0.1
    attack = 9 # 1.5 seconds duration
    decay = 0
    sustain = 0
    release = 0
    output = _SV_ANIMATION

[superjust]
    bypass = 1
    input1 = _SV_ANIMATION + L4.6
    input2 = _SV_ANIMATION + L4.5
    input3 = _SV_ANIMATION + L3.6
    input4 = _SV_ANIMATION + L3.5
    input5 = _SV_ANIMATION + L2.6
    input6 = _SV_ANIMATION + L2.5
    input7 = _SV_ANIMATION + L1.6
    input8 = _SV_ANIMATION + L1.5
    output1 = L4.6
    output2 = L4.5
    output3 = L3.6
    output4 = L3.5
    output5 = L2.6
    output6 = L2.5
    output7 = L1.6
    output8 = L1.5

[superjust]
    bypass = 1
    input1 = _SV_ANIMATION + L4.8
    input2 = _SV_ANIMATION + L4.7
    input3 = _SV_ANIMATION + L3.8
    input4 = _SV_ANIMATION + L3.7
    input5 = _SV_ANIMATION + L2.8
    input6 = _SV_ANIMATION + L2.7
    input7 = _SV_ANIMATION + L1.8
    input8 = _SV_ANIMATION + L1.7
    output1 = L4.8
    output2 = L4.7
    output3 = L3.8
    output4 = L3.7
    output5 = L2.8
    output6 = L2.7
    output7 = L1.8
    output8 = L1.7

# ////////////// KEYBOARD LEDS ///////////////
# [copy]

[superjust]
    input1 = 0.2 * _LIVE_MODE + L1.7
    input2 = 0.2 * _LIVE_MODE + L1.6
    input3 = 0.2 * _LIVE_MODE + L1.8
    input4 = 0.2 * _LIVE_MODE + L2.5
    input5 = 0.2 * _LIVE_MODE + L2.7
    input6 = 0.2 * _LIVE_MODE + L2.8
    input7 = 0.2 * _LIVE_MODE + L3.5
    input8 = 0.2 * _LIVE_MODE + L3.7
    bypass = 1
    output1 = L1.7
    output2 = L1.6
    output3 = L1.8
    output4 = L2.5
    output5 = L2.7
    output6 = L2.8
    output7 = L3.5
    output8 = L3.7

[superjust]
    input1 = 0.2 * _LIVE_MODE + L3.6
    input2 = 0.2 * _LIVE_MODE + L3.8
    input3 = 0.2 * _LIVE_MODE + L4.5
    input4 = 0.2 * _LIVE_MODE + L4.7
    input5 = 0.2 * _LIVE_MODE + L4.8
    bypass = 1
    output1 = L3.6
    output2 = L3.8
    output3 = L4.5
    output4 = L4.7
    output5 = L4.8
